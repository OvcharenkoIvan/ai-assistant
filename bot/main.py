# bot/main.py
import sys
import asyncio
import logging
from pathlib import Path
from telegram import BotCommand, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from bot.memory.capture import handle_capture_callback
from bot.memory.intent import process_intent
from bot.commands.start_help import start, help_command
from bot.commands.voice import voice_on, voice_off, voice_status
from bot.gpt.chat import chat_with_gpt
from bot.voice.handler import handle_voice
from bot.core.config import TELEGRAM_TOKEN

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ ---
ROOT_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(ROOT_DIR))

# --- Owner ID ---
OWNER_ID = 423368779

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ---
if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("aiohttp").setLevel(logging.WARNING)

# --- –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
voice_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üîä –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å"), KeyboardButton("üîá –í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def send_owner_keyboard(app):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    try:
        await app.bot.send_message(
            chat_id=OWNER_ID,
            text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:",
            reply_markup=voice_keyboard
        )
        logging.info(f"üì≤ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {OWNER_ID}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

async def main():
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    # --- –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # --- –ö–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞ ---
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("voice_on", "–í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"),
        BotCommand("voice_off", "–í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"),
        BotCommand("voice_status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"),
        BotCommand("keyboard", "–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
    ])

    # --- CommandHandler ---
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("voice_on", voice_on))
    app.add_handler(CommandHandler("voice_off", voice_off))
    app.add_handler(CommandHandler("voice_status", voice_status))

    # --- MessageHandler –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    app.add_handler(MessageHandler(filters.Regex("^üîä –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å$"), voice_on))
    app.add_handler(MessageHandler(filters.Regex("^üîá –í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å$"), voice_off))

    # --- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # --- Inline –∫–Ω–æ–ø–∫–∏ Smart Capture ---
    app.add_handler(CallbackQueryHandler(handle_capture_callback, pattern=r"^capture:"))

    # --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: GPT + Smart Capture ---
    async def text_handler(update, context):
        message = update.message
        if not message or not message.text:
            return
        # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ Smart Capture
        await process_intent(message)
        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ GPT
        await chat_with_gpt(update, context)

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    # --- –õ–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ ---
    me = await app.bot.get_me()
    logging.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username} (id={me.id})")

    # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–ª–∞–¥–µ–ª—å—Ü—É ---
    await send_owner_keyboard(app)

    # --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "event loop is already running" in str(e):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise
