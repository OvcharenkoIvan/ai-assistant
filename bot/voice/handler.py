# bot/voice/handler.py
import asyncio
import logging
from datetime import datetime
from pathlib import Path

from telegram import Update
from telegram.ext import ContextTypes

from bot.core.config import UPLOADS_DIR
from bot.voice.stt import transcribe
from bot.voice.tts import synthesize_and_send_voice  # –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ TTS
from bot.voice.state import should_send_voice_now
from bot.gpt.chat import build_messages, ask_gpt

logger = logging.getLogger(__name__)


async def _ogg_to_mp3(ogg_path: str, mp3_path: str) -> None:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG(Opus) -> MP3 —á–µ—Ä–µ–∑ ffmpeg –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    import subprocess

    cmd = [
        "ffmpeg",
        "-y",
        "-i", ogg_path,
        "-acodec", "libmp3lame",
        "-ar", "44100",
        mp3_path,
    ]
    proc = await asyncio.to_thread(subprocess.run, cmd, capture_output=True, text=True)
    if proc.returncode != 0:
        raise RuntimeError(f"ffmpeg error: {proc.stderr}")


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
    1) –°–∫–∞—á–∏–≤–∞–µ–º voice.ogg
    2) –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
    3) STT -> —Ç–µ–∫—Å—Ç
    4) GPT -> –æ—Ç–≤–µ—Ç
    5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (–∏ –∞—É–¥–∏–æ, –µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω –∏–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ñ–ª–∞–≥)
    """
    if not update.message or not update.message.voice:
        return

    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name

    # –ü—É—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_dir = Path(UPLOADS_DIR) / str(user_id)
    user_dir.mkdir(parents=True, exist_ok=True)

    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    ogg_path = user_dir / f"{ts}_input.ogg"
    mp3_in_path = user_dir / f"{ts}_input.mp3"

    try:
        # 1) –°–∫–∞—á–∏–≤–∞–Ω–∏–µ .ogg
        voice_file = await update.message.voice.get_file()
        await voice_file.download_to_drive(ogg_path.as_posix())
        logger.info(f"[voice] {username} -> —Å–æ—Ö—Ä–∞–Ω—ë–Ω {ogg_path.name}")

        # 2) –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3
        await _ogg_to_mp3(ogg_path.as_posix(), mp3_in_path.as_posix())

        # 3) STT
        recognized_text = await transcribe(mp3_in_path.as_posix())
        if not recognized_text:
            recognized_text = "(–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å)"
        logger.info(f"[voice->text] {username}: {recognized_text}")

        # 4) GPT
        messages = build_messages(user_id, recognized_text)
        reply_text = ask_gpt(messages).strip()

        # 5) –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
        await update.message.reply_text(
            f"üó£ –¢—ã —Å–∫–∞–∑–∞–ª: {recognized_text}\n\nüí¨ –û—Ç–≤–µ—Ç: {reply_text}"
        )

        # 6) –û—Ç–ø—Ä–∞–≤–∫–∞ TTS (–≥–ª–æ–±–∞–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ñ–ª–∞–≥)
        if should_send_voice_now(user_id):
            await synthesize_and_send_voice(update, reply_text)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
