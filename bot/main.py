# bot/main.py
import sys
import asyncio
import logging
from pathlib import Path
from telegram import BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# --- –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è sys.path ---
ROOT_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(ROOT_DIR))

# --- –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–æ–¥—É–ª–µ–π ---
from bot.core.config import TELEGRAM_TOKEN

if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–∞–Ω–¥ ---
from bot.commands.start_help import start, help_command
# from bot.commands.notes import note, notes, reset, search  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ

from bot.commands.voice import (
    voice_on,
    voice_off,
    voice_status,
    answer_voice,
    –æ—Ç–≤–µ—Ç—å_–∞—É–¥–∏–æ,
    voice_inline,
    voice_button_handler,
)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
from bot.gpt.chat import chat_with_gpt          # —Ç–µ–∫—Å—Ç ‚Üí GPT
from bot.voice.handler import handle_voice      # voice ‚Üí STT ‚Üí GPT ‚Üí (TTS)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("aiohttp").setLevel(logging.WARNING)


async def main():
    # Windows: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é ---
    await app.bot.set_my_commands(
        [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("help", "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
            BotCommand("voice_on", "–í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"),
            BotCommand("voice_off", "–í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"),
            BotCommand("voice_status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"),
            BotCommand("answer_voice", "–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≤ –≥–æ–ª–æ—Å–µ"),
            BotCommand("reply_audio", "–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≤ –≥–æ–ª–æ—Å–µ (—Ä—É—Å.)"),  # –ª–∞—Ç–∏–Ω–∏—Ü–∞ –≤ command
            BotCommand("voice_inline", "–û—Ç–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–º"),
        ]
    )

    # --- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    # app.add_handler(CommandHandler("note", note))     # –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    # app.add_handler(CommandHandler("notes", notes))   # –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    # app.add_handler(CommandHandler("reset", reset))   # –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    # app.add_handler(CommandHandler("search", search)) # –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ

    # --- –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
    app.add_handler(CommandHandler("voice_on", voice_on))
    app.add_handler(CommandHandler("voice_off", voice_off))
    app.add_handler(CommandHandler("voice_status", voice_status))
    app.add_handler(CommandHandler("answer_voice", answer_voice))
    app.add_handler(CommandHandler("reply_audio", –æ—Ç–≤–µ—Ç—å_–∞—É–¥–∏–æ))

    # --- Inline-–∫–Ω–æ–ø–∫–∏ ---
    app.add_handler(CommandHandler("voice_inline", voice_inline))
    app.add_handler(
        CallbackQueryHandler(
            voice_button_handler, pattern=r"^(voice_on|voice_off|next_voice)$"
        )
    )

    # --- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # --- –¢–µ–∫—Å—Ç ‚Üí GPT (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥) ---
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_with_gpt))

    # –õ–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    me = await app.bot.get_me()
    logging.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username} (id={me.id})")

    await app.run_polling(drop_pending_updates=True, close_loop=False)


if __name__ == "__main__":
    import nest_asyncio

    nest_asyncio.apply()
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "event loop is already running" in str(e):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise
