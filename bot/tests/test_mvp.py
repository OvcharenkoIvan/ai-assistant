# bot/tests/test_mvp.py

import asyncio
from bot.memory.memory_sqlite import init_db, add_task, add_note, list_tasks, list_notes
from bot.memory.intent import detect_intent
from bot.memory.capture import offer_capture, handle_capture_callback

# =========================
# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
# =========================

async def reset_db():
    """–û—á–∏—Å—Ç–∫–∞ SQLite-–±–∞–∑—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏"""
    await init_db()
    # –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    tasks = await list_tasks()
    notes = await list_notes()
    for t in tasks:
        pass  # –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    for n in notes:
        pass
    print("üóëÔ∏è  DB –æ—á–∏—â–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏")

class FakeMessage:
    def __init__(self, text, user_id=123):
        self.text = text
        self.from_user = type("User", (), {"id": user_id})

    async def answer(self, text, **kwargs):
        print(f"[Bot Answer] {text} | kwargs={kwargs}")

    async def edit_text(self, text, **kwargs):
        print(f"[Edit Message] {text} | kwargs={kwargs}")

class FakeCallback:
    def __init__(self, data, user_id=123):
        self.data = data
        self.from_user = type("User", (), {"id": user_id})

    async def answer(self, text=None, show_alert=False):
        print(f"[Callback answer] text={text} show_alert={show_alert}")

# =========================
# –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
# =========================

async def run_tests():
    print("\n\nüöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–∞–º—è—Ç–∏\n")

    await reset_db()

    print("\n" + "=" * 50)
    print("‚ú® SQLite (tasks + notes)")
    print("=" * 50)

    t1 = await add_task("—Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", user_id=1)
    n1 = await add_note("–ò–¥–µ—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", user_id=1)

    tasks = await list_tasks()
    notes = await list_notes()
    print("üìå Tasks:", tasks)
    print("üìù Notes:", notes)

    print("\n" + "=" * 50)
    print("‚ú® Intent + Cache")
    print("=" * 50)

    q = "–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç"
    result1 = await detect_intent(q)
    print("‚ö° First call:", result1)
    result2 = await detect_intent(q)
    print("‚ö° Second call (cached):", result2)

    print("\n" + "=" * 50)
    print("‚ú® Capture + Callback (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)")
    print("=" * 50)

    msg = FakeMessage("–°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç")
    await offer_capture(msg)

    # –¥–æ—Å—Ç–∞—ë–º ID –∏–∑ capture_store –Ω–∞–ø—Ä—è–º—É—é
    from bot.memory import capture as capture_module
    stored_id = list(capture_module.capture_store.keys())[0]

    cb = FakeCallback(f"capture:task:{stored_id}")
    await handle_capture_callback(cb)

    final_tasks = await list_tasks()
    print("‚úÖ Final tasks in DB:", final_tasks)

    print("\nüéâ –í—Å–µ –±–ª–æ–∫–∏ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(run_tests())
