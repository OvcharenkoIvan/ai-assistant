import sys
import asyncio
import os
import logging
from pathlib import Path
from dotenv import load_dotenv
from telegram import BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters

# --- –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è sys.path –∏ dotenv ---
ROOT_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(ROOT_DIR))  # —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω–æ –ø–∞–ø–∫—É core

load_dotenv(ROOT_DIR / ".env")  # –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–∞–Ω–¥ –∏ GPT ---
from bot.commands.start_help import start, help_command
from bot.commands.notes import note, notes, reset, search
from bot.gpt.chat import chat_with_gpt

logging.basicConfig(level=logging.INFO)

async def main():
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("note", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        BotCommand("notes", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"),
        BotCommand("search", "–ò—Å–∫–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏"),
        BotCommand("reset", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
    ])

    # --- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("note", note))
    app.add_handler(CommandHandler("notes", notes))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("search", search))

    # --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è GPT –Ω–∞ –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ ---
    app.add_handler(MessageHandler(~filters.COMMAND, chat_with_gpt))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling(close_loop=False, drop_pending_updates=True)

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "event loop is already running" in str(e):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise

