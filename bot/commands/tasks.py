# bot/commands/tasks.py
from telegram import Update
from telegram.ext import ContextTypes
from bot.memory.memory_loader import get_memory
from bot.core.logger import log_action
from functools import partial

# Singleton memory instance
_mem = get_memory()


async def add_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ö–æ–º–∞–Ω–¥–∞: /task <—Ç–µ–∫—Å—Ç>
    """
    user_id = update.effective_user.id
    text = " ".join(context.args).strip()
    if not text:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: /task <—Ç–µ–∫—Å—Ç>")
        return

    task_id = await _mem.add_task(user_id=user_id, text=text)
    log_action(f"User {user_id} –¥–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É (id={task_id}): {text}")
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")


async def tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ö–æ–º–∞–Ω–¥–∞: /tasks
    """
    user_id = update.effective_user.id
    tasks_list = await _mem.list_tasks(user_id=user_id, status="open")
    if not tasks_list:
        await update.message.reply_text("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á.")
        return

    msg = "\n".join(f"{i+1}. {t.text}" for i, t in enumerate(tasks_list[:20]))
    if len(tasks_list) > 20:
        msg += f"\n\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(tasks_list)}"
    await update.message.reply_text("üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n" + msg)


async def reset_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ö–æ–º–∞–Ω–¥–∞: /reset_tasks
    """
    user_id = update.effective_user.id
    tasks_list = await _mem.list_tasks(user_id=user_id)
    for t in tasks_list:
        await _mem.delete_task(t.id)
    log_action(f"User {user_id} —É–¥–∞–ª–∏–ª –≤—Å–µ –∑–∞–¥–∞—á–∏")
    await update.message.reply_text("üóë –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")


async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.
    –ö–æ–º–∞–Ω–¥–∞: /complete <–Ω–æ–º–µ—Ä>
    """
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: /complete <–Ω–æ–º–µ—Ä>")
        return

    try:
        task_num = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    tasks_list = await _mem.list_tasks(user_id=user_id, status="open")
    if task_num < 1 or task_num > len(tasks_list):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return

    task = tasks_list[task_num - 1]
    await _mem.update_task(task.id, status="done")
    log_action(f"User {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É: {task.text}")
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task.text}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
