from __future__ import annotations

import logging
import uuid
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Tuple, Optional
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes, Application

from bot.memory.formatters import format_text  # —Ñ–æ—Ä–º–∞—Ç–µ—Ä—ã GPT + fallback

logger = logging.getLogger(__name__)

# capture_store: capture_id -> (text, timestamp)
capture_store: Dict[str, Tuple[str, datetime]] = {}

# TTL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π
CAPTURE_TTL = timedelta(days=7)

TASK = "task"
NOTE = "note"
CANCEL = "cancel"


def build_capture_keyboard(capture_id: str) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è Smart Capture"""
    buttons = [
        [
            InlineKeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞", callback_data=f"capture:{TASK}:{capture_id}"),
            InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=f"capture:{NOTE}:{capture_id}")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"capture:{CANCEL}:{capture_id}")]
    ]
    return InlineKeyboardMarkup(buttons)


async def offer_capture(source, context=None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.
    source: Message –∏–ª–∏ Update
    """
    if hasattr(source, "message"):
        message = source.message
    else:
        message = source

    if not message or not getattr(message, "text", None):
        return

    capture_id = str(uuid.uuid4())
    capture_store[capture_id] = (message.text, datetime.now())

    kb = build_capture_keyboard(capture_id)
    preview = message.text if len(message.text) <= 50 else message.text[:47] + "..."
    await message.reply_text(
        f"–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ?\n\n<code>{preview}</code>",
        reply_markup=kb,
        parse_mode="HTML",
    )


async def _run_blocking(func, *args, **kwargs):
    """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ executor-–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è event loop"""
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, lambda: func(*args, **kwargs))


async def handle_capture_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ Smart Capture"""
    callback = update.callback_query
    if not callback or not callback.data or not callback.data.startswith("capture:"):
        return

    capture_id: Optional[str] = None
    try:
        _, kind, capture_id = callback.data.split(":", 2)
        entry = capture_store.pop(capture_id, None)
        raw_text = entry[0] if entry else None
        user_id = callback.from_user.id if callback.from_user else None

        if not raw_text:
            await callback.answer("‚ö†Ô∏è –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
            return

        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        from bot.memory.memory_loader import get_memory
        _mem = get_memory()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–µ—Ä—ã GPT + fallback
        try:
            fmt_result = await format_text(raw_text, fmt_type=kind, user_id=user_id)
        except Exception as e:
            logger.warning("Formatter failed, fallback to raw_text: %s", e)
            fmt_result = {"body": raw_text, "raw_text": raw_text, "due_at": None}

        body = fmt_result.get("body", raw_text)
        raw = fmt_result.get("raw_text", raw_text)
        due_at = fmt_result.get("due_at")
        extra = fmt_result

        if kind == TASK:
            task_id = await _run_blocking(
                _mem.add_task,
                user_id,
                body,
                raw_text=raw,
                due_at=due_at,
                extra=extra,
            )
            reply_text = f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (id={task_id})"
            logger.info("Task saved id=%s user_id=%s due_at=%s", task_id, user_id, due_at)

        elif kind == NOTE:
            note_id = await _run_blocking(
                _mem.add_note,
                user_id,
                body,
                raw_text=raw,
                extra=extra,
            )
            reply_text = f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (id={note_id})"
            logger.info("Note saved id=%s user_id=%s", note_id, user_id)

        elif kind == CANCEL:
            reply_text = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ."
            logger.info("Capture cancelled by user_id=%s", user_id)

        else:
            reply_text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
            logger.warning("Unknown capture action: %s", kind)

        if callback.message:
            await callback.message.edit_text(reply_text)
        await callback.answer()

    except Exception as e:
        logger.exception("handle_capture_callback error: %s", e)
        try:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)
        except Exception:
            pass


async def cleanup_expired_captures():
    """–£–¥–∞–ª—è–µ—Ç –∏–∑ capture_store –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ CAPTURE_TTL –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö"""
    now = datetime.now()
    expired = [cid for cid, (_, ts) in capture_store.items() if now - ts > CAPTURE_TTL]
    for cid in expired:
        text, _ = capture_store.pop(cid)
        logger.info("Expired capture removed: %s -> %s", cid, text[:50])


async def schedule_daily_cleanup(app: Application):
    """–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ capture_store –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00"""
    async def _daily_task():
        while True:
            now = datetime.now()
            next_run = datetime.combine(now.date() + timedelta(days=1), datetime.min.time())
            wait_seconds = (next_run - now).total_seconds()
            await asyncio.sleep(wait_seconds)
            await cleanup_expired_captures()

    app.create_task(_daily_task())
