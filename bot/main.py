# bot/main.py
import sys
import asyncio
import logging
from functools import partial
from pathlib import Path

from telegram import BotCommand, ReplyKeyboardMarkup, KeyboardButton, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# --- –ú–æ–¥—É–ª–∏ –±–æ—Ç–∞ ---
from bot.memory.capture import handle_capture_callback
from bot.memory.intent import process_intent
from bot.commands.start_help import start, help_command
from bot.commands.voice import voice_on, voice_off, voice_status
from bot.commands import notes, tasks
from bot.gpt.chat import chat_with_gpt
from bot.memory.memory_loader import get_memory
from bot.core.config import TELEGRAM_TOKEN

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ ---
ROOT_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(ROOT_DIR))

# --- Owner ID (–¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–º) ---
OWNER_ID = 423368779

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º ---
if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("aiohttp").setLevel(logging.WARNING)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
voice_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("üîä –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å"), KeyboardButton("üîá –í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å")]],
    resize_keyboard=True,
    one_time_keyboard=False
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ ---
_mem = get_memory()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä MemorySQLite –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞


async def send_owner_keyboard(app):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        await app.bot.send_message(
            chat_id=OWNER_ID,
            text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:",
            reply_markup=voice_keyboard
        )
        logging.info(f"üì≤ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {OWNER_ID}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    1. –ü—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å –∏–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ process_intent (Smart Capture)
    2. –ï—Å–ª–∏ –∏–Ω—Ç–µ–Ω—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GPT
    """
    if not update.message or not update.message.text:
        return

    handled = await process_intent(update.message)
    if not handled:
        await chat_with_gpt(update, context)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∫—à–Ω"""
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}", exc_info=context.error)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    # --- –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("voice_on", "–í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"),
        BotCommand("voice_off", "–í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"),
        BotCommand("voice_status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"),
        BotCommand("keyboard", "–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
        BotCommand("note", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        BotCommand("notes", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"),
        BotCommand("search", "–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫"),
        BotCommand("reset", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"),
        BotCommand("task", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"),
        BotCommand("tasks", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"),
        BotCommand("reset_tasks", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"),
    ])

    # --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
    app.add_error_handler(error_handler)

    # --- CommandHandler –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("voice_on", voice_on))
    app.add_handler(CommandHandler("voice_off", voice_off))
    app.add_handler(CommandHandler("voice_status", voice_status))

    # --- Notes: –∏—Å–ø–æ–ª—å–∑—É–µ–º partial –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ _mem ---
    app.add_handler(CommandHandler("note", partial(notes.note, _mem=_mem)))
    app.add_handler(CommandHandler("notes", partial(notes.notes, _mem=_mem)))
    app.add_handler(CommandHandler("reset", partial(notes.reset, _mem=_mem)))
    app.add_handler(CommandHandler("search", partial(notes.search, _mem=_mem)))

    # --- Tasks: partial –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ _mem ---
    app.add_handler(CommandHandler("task", partial(tasks.add_task_command, _mem=_mem)))
    app.add_handler(CommandHandler("tasks", partial(tasks.tasks, _mem=_mem)))
    app.add_handler(CommandHandler("reset_tasks", partial(tasks.reset_tasks, _mem=_mem)))

    # --- –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ---
    app.add_handler(MessageHandler(filters.Regex("^üîä –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å$"), voice_on))
    app.add_handler(MessageHandler(filters.Regex("^üîá –í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å$"), voice_off))

    # --- Inline –∫–Ω–æ–ø–∫–∏ Smart Capture ---
    app.add_handler(CallbackQueryHandler(handle_capture_callback, pattern=r"^capture:"))

    # --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: GPT + Smart Capture ---
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    # --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–ª–∞–¥–µ–ª—å—Ü—É ---
    me = await app.bot.get_me()
    logging.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username} (id={me.id})")
    await send_owner_keyboard(app)
    await app.run_polling()


if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "event loop is already running" in str(e):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise
# bot/memory/capture.py
import asyncio