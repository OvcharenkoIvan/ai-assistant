# bot/memory/capture.py
"""
Smart Capture: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏.
–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å python-telegram-bot v20 –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
"""

from __future__ import annotations

import logging
import uuid
import asyncio
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes

from bot.memory.memory_loader import get_memory

logger = logging.getLogger(__name__)

# Singleton memory backend
_mem = get_memory()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π (capture_id -> —Ç–µ–∫—Å—Ç)
capture_store: dict[str, str] = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
TASK = "task"
NOTE = "note"
CANCEL = "cancel"


def build_capture_keyboard(capture_id: str) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è Smart Capture."""
    buttons = [
        [
            InlineKeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞", callback_data=f"capture:{TASK}:{capture_id}"),
            InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=f"capture:{NOTE}:{capture_id}")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"capture:{CANCEL}:{capture_id}")]
    ]
    return InlineKeyboardMarkup(buttons)


async def offer_capture(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∏–∑–∫–æ- –∏–ª–∏ –≤—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ intent.
    """
    message = update.effective_message
    if not message or not message.text:
        return

    capture_id = str(uuid.uuid4())
    capture_store[capture_id] = message.text

    kb = build_capture_keyboard(capture_id)
    preview = message.text if len(message.text) <= 50 else message.text[:47] + "..."
    await message.reply_text(
        f"–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ?\n\n<code>{preview}</code>",
        reply_markup=kb,
        parse_mode="HTML",
    )


async def _run_blocking(func, *args, **kwargs):
    """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º executor-–µ –¥–ª—è –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è event loop."""
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, lambda: func(*args, **kwargs))


async def handle_capture_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ Smart Capture."""
    callback = update.callback_query
    if not callback or not callback.data or not callback.data.startswith("capture:"):
        return

    try:
        _, kind, capture_id = callback.data.split(":", 2)
        text = capture_store.pop(capture_id, None)
        user_id = callback.from_user.id if callback.from_user else None

        if not text:
            await callback.answer("‚ö†Ô∏è –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
            return

        if kind == TASK:
            task_id = await _run_blocking(_mem.add_task, text=text, user_id=user_id)
            reply_text = f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (id={task_id})"
            logger.info("Task saved id=%s user_id=%s", task_id, user_id)

        elif kind == NOTE:
            note_id = await _run_blocking(_mem.add_note, text=text, user_id=user_id)
            reply_text = f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (id={note_id})"
            logger.info("Note saved id=%s user_id=%s", note_id, user_id)

        elif kind == CANCEL:
            reply_text = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ."
            logger.info("Capture cancelled by user_id=%s", user_id)

        else:
            reply_text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
            logger.warning("Unknown capture action: %s", kind)

        if callback.message:
            await callback.message.edit_text(reply_text)
        await callback.answer()

    except Exception as e:
        logger.exception("handle_capture_callback error: %s", e)
        try:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)
        except Exception:
            pass  # –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    finally:
        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª–∏—Å—å)
        capture_store.pop(capture_id, None)
