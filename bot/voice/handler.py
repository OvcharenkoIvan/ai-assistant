# bot/voice/handler.py
import asyncio
import logging
import subprocess
from datetime import datetime
from pathlib import Path

from telegram import Update
from telegram.ext import ContextTypes

from bot.core.config import UPLOADS_DIR
from bot.voice.stt import transcribe
from bot.voice.tts import speak
from bot.voice.state import is_voice_on
from bot.gpt.chat import build_messages, ask_gpt

logger = logging.getLogger(__name__)

def _ffmpeg_convert_sync(src_path: str, dst_path: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG(Opus) -> MP3 —á–µ—Ä–µ–∑ ffmpeg.
    -y: –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
    """
    cmd = [
        "ffmpeg",
        "-y",
        "-i", src_path,
        "-acodec", "libmp3lame",
        "-ar", "44100",
        dst_path,
    ]
    proc = subprocess.run(cmd, capture_output=True, text=True)
    if proc.returncode != 0:
        raise RuntimeError(f"ffmpeg error: {proc.stderr}")
    return dst_path

async def _ogg_to_mp3(ogg_path: str, mp3_path: str) -> str:
    return await asyncio.to_thread(_ffmpeg_convert_sync, ogg_path, mp3_path)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    1) –°–∫–∞—á–∏–≤–∞–µ–º voice.ogg
    2) –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ .mp3
    3) STT -> —Ç–µ–∫—Å—Ç
    4) GPT -> –æ—Ç–≤–µ—Ç
    5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (+ –∞—É–¥–∏–æ, –µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω)
    """
    if not update.message or not update.message.voice:
        return

    user = update.effective_user
    user_id = user.id
    username = user.username or user.full_name

    # –ü—É—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_dir = Path(UPLOADS_DIR) / str(user_id)
    user_dir.mkdir(parents=True, exist_ok=True)

    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    ogg_path = user_dir / f"{ts}_input.ogg"
    mp3_in_path = user_dir / f"{ts}_input.mp3"
    mp3_out_path = user_dir / f"{ts}_reply.mp3"

    try:
        # 1) –°–∫–∞—á–∏–≤–∞–Ω–∏–µ .ogg
        file = await update.message.voice.get_file()
        await file.download_to_drive(ogg_path.as_posix())
        logger.info(f"[voice] {username} -> —Å–æ—Ö—Ä–∞–Ω—ë–Ω {ogg_path.name}")

        # 2) –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ .mp3
        await _ogg_to_mp3(ogg_path.as_posix(), mp3_in_path.as_posix())

        # 3) STT
        recognized_text = await transcribe(mp3_in_path.as_posix())
        if not recognized_text:
            recognized_text = "(–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å)"
        logger.info(f"[voice->text] {username}: {recognized_text}")

        # 4) GPT
        messages = build_messages(user_id, recognized_text)
        reply_text = ask_gpt(messages).strip()

        # 5) –û—Ç–≤–µ—Ç: –≤—Å–µ–≥–¥–∞ —Ç–µ–∫—Å—Ç
        await update.message.reply_text(
            f"üó£ –¢—ã —Å–∫–∞–∑–∞–ª: {recognized_text}\n\nüí¨ –û—Ç–≤–µ—Ç: {reply_text}"
        )

        # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω ‚Äî –æ–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º mp3 –∫–∞–∫ –∞—É–¥–∏–æ
        if is_voice_on(user_id):
            await speak(reply_text, mp3_out_path.as_posix())
            with mp3_out_path.open("rb") as f:
                await update.message.reply_audio(
                    audio=f,
                    caption="üîä –ê—É–¥–∏–æ-–æ—Ç–≤–µ—Ç",
                    title=f"reply_{ts}.mp3",
                )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
