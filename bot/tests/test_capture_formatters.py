# bot/tests/test_capture_formatters.py (–í—ã–∑–æ–≤ —Ç–µ—Å—Ç–∞: python -m bot.tests.test_capture_formatters)
import asyncio
import pytest
from unittest.mock import AsyncMock, patch
from datetime import datetime

from bot.memory.capture import offer_capture, handle_capture_callback, capture_store, TASK
from bot.memory.formatters import format_text, parse_due_at
from telegram import Update

@pytest.mark.asyncio
async def test_format_text_with_mocked_gpt():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º format_text –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏ fallback."""

    raw_text = "–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ –¥–æ –∑–∞–≤—Ç—Ä–∞"

    # –ú–æ–∫–∞–µ–º ask_gpt
    async def mock_ask_gpt(prompt: str):
        if "email" in prompt:
            return '{"subject": "–¢–µ–º–∞", "body": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞", "to": ["a@b.com"], "due_at": "–∑–∞–≤—Ç—Ä–∞"}'
        elif "meeting" in prompt:
            return '{"tasks":[{"task":"–°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç","due_at":"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"}],"notes":["–û–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"]}'
        else:  # vector
            return "–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"

    # –ú–æ–∫–∞–µ–º load_prompt (—á—Ç–æ–±—ã –Ω–µ –ª–∞–∑–∏–ª –≤ —Ñ–∞–π–ª—ã)
    def mock_load_prompt(fmt_type: str):
        return f"PROMPT({fmt_type})"

    with patch("bot.memory.formatters.ask_gpt", new=mock_ask_gpt), \
         patch("bot.memory.formatters.load_prompt", new=mock_load_prompt):

        # email
        result_email = await format_text(raw_text, fmt_type="email")
        assert result_email["subject"] == "–¢–µ–º–∞"
        assert result_email["body"] == "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞"
        assert isinstance(result_email["due_at"], int)

        # meeting
        result_meeting = await format_text(raw_text, fmt_type="meeting")
        assert len(result_meeting["tasks"]) == 1
        assert isinstance(result_meeting["tasks"][0]["due_at"], int)
        assert "–û–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç" in result_meeting["notes"]

        # vector
        result_vector = await format_text(raw_text, fmt_type="vector")
        assert "vector_text" in result_vector

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
    async def mock_bad_gpt(prompt: str):
        return "–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"

    with patch("bot.memory.formatters.ask_gpt", new=mock_bad_gpt), \
         patch("bot.memory.formatters.load_prompt", new=mock_load_prompt):

        fallback_result = await format_text(raw_text, fmt_type="email")
        assert fallback_result["body"] == raw_text
        assert fallback_result["subject"] is None


@pytest.mark.asyncio
async def test_capture_integration_with_formatters():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é capture -> formatters -> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ."""

    class DummyMessage:
        text = "–°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç"
        async def reply_text(self, text, **kwargs):
            self.reply_text_called = text
            return self

    class DummyUser:
        id = 123

    class DummyCallback:
        data = ""
        message = DummyMessage()
        from_user = DummyUser()
        async def answer(self, **kwargs):
            self.answer_called = True
        async def edit_text(self, text):
            self.edited_text = text

    message = DummyMessage()
    update_offer = Update(update_id=1, message=message)
    context = AsyncMock()

    # –ó–∞–ø—É—Å–∫–∞–µ–º offer_capture
    await offer_capture(update_offer, context)
    assert len(capture_store) == 1
    capture_id = list(capture_store.keys())[0]
    assert capture_store[capture_id] == message.text

    # –ú–æ–∫–∞–µ–º ask_gpt + load_prompt
    async def mock_ask_gpt(prompt: str):
        return '{"body":"–°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç","raw_text":"–°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç"}'
    def mock_load_prompt(fmt_type: str):
        return f"PROMPT({fmt_type})"

    with patch("bot.memory.formatters.ask_gpt", new=mock_ask_gpt), \
         patch("bot.memory.formatters.load_prompt", new=mock_load_prompt):

        callback = DummyCallback()
        callback.data = f"capture:{TASK}:{capture_id}"
        update_callback = Update(update_id=2, callback_query=callback)
        await handle_capture_callback(update_callback, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ capture_store –æ—á–∏—Å—Ç–∏–ª—Å—è
        assert capture_id not in capture_store
        assert hasattr(callback, "answer_called")
        assert hasattr(callback, "edited_text")
        assert "‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞" in callback.edited_text


@pytest.mark.asyncio
async def test_parse_due_at():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º parse_due_at –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π."""
    texts = [
        "—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞",
        "—Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "—Å–ª–µ–¥—É—é—â–∞—è –ø—è—Ç–Ω–∏—Ü–∞",
        "—á–µ—Ä–µ–∑ 2 –¥–Ω—è", "next Monday", "tomorrow 15:00"
    ]
    for t in texts:
        ts = parse_due_at(t)
        assert ts is None or isinstance(ts, int)
        if ts:
            assert ts > int(datetime.now().timestamp()) - 10


# –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é: python -m bot.tests.test_capture_formatters
if __name__ == "__main__":
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ capture_formatters")
    asyncio.run(test_format_text_with_mocked_gpt())
    asyncio.run(test_capture_integration_with_formatters())
    asyncio.run(test_parse_due_at())
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
