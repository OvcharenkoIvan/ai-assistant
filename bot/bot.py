import sys
import asyncio
import os
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
from core import storage
from core.logger import log_action

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Windows
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–º–µ—Ç–∫–∞–º.\n\n"
        "üìå /note <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "üìú /notes ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n"
        "üîç /search <–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ> ‚Äî –ø–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫\n"
        "üóë /reset ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n"
        "‚ÑπÔ∏è /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "–í—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨á"
    )
    log_action(f"User {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /note <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "‚Ä¢ /notes ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n"
        "‚Ä¢ /search <–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ> ‚Äî –ø–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫\n"
        "‚Ä¢ /reset ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"
    )

async def note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    note_text = " ".join(context.args).strip()
    if not note_text:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /note")
        return
    storage.add_note(user_id, note_text)
    log_action(f"User {user_id} –¥–æ–±–∞–≤–∏–ª –∑–∞–º–µ—Ç–∫—É: {note_text}")
    await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

async def notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    notes = storage.get_notes(user_id)
    if not notes:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return
    max_notes = 20
    limited_notes = notes[:max_notes]
    msg = "\n".join(f"{i+1}. {n}" for i, n in enumerate(limited_notes, start=1))
    if len(notes) > max_notes:
        msg += f"\n\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {max_notes} –∑–∞–º–µ—Ç–æ–∫ –∏–∑ {len(notes)}."
    await update.message.reply_text("üìù –¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n" + msg)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    storage.reset_notes(user_id)
    log_action(f"User {user_id} —É–¥–∞–ª–∏–ª –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")
    await update.message.reply_text("üóë –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyword = " ".join(context.args).strip()
    if not keyword:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: /search <—Å–ª–æ–≤–æ>")
        return
    results = storage.search_notes(user_id, keyword)
    log_action(f"User {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á—É: {keyword}")
    if results:
        msg = "\n".join(f"{i+1}. {note}" for i, note in enumerate(results, start=1))
        await update.message.reply_text("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n" + msg)
    else:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("note", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        BotCommand("notes", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"),
        BotCommand("search", "–ò—Å–∫–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏"),
        BotCommand("reset", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ])

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("note", note))
    app.add_handler(CommandHandler("notes", notes))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("search", search))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
