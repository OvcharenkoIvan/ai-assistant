import sys
import asyncio
import os
import logging

from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from core import storage
from core.logger import log_action

# GPT (–Ω–æ–≤—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç OpenAI)
from openai import OpenAI

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# -----------------------------
# –ü–æ–ª–∏—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π (Windows fix)
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] [%(levelname)s] %(name)s: %(message)s",
)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
if not OPENAI_API_KEY:
    logging.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî GPT-–æ—Ç–≤–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI-–∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å)
client = None
if OPENAI_API_KEY:
    client = OpenAI(api_key=OPENAI_API_KEY)

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# -----------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
        "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:\n"
        "üìå /note <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "üìú /notes ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n"
        "üîç /search <–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ> ‚Äî –ø–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫\n"
        "üóë /reset ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n"
        "‚ÑπÔ∏è /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "üí¨ –¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî —è –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ GPT."
    )
    log_action(f"User {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /note <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "‚Ä¢ /notes ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n"
        "‚Ä¢ /search <–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ> ‚Äî –ø–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫\n"
        "‚Ä¢ /reset ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n\n"
        "üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ GPT (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–ª—é—á)."
    )

async def note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    note_text = " ".join(context.args).strip()
    if not note_text:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /note")
        return
    storage.add_note(user_id, note_text)
    log_action(f"User {user_id} –¥–æ–±–∞–≤–∏–ª –∑–∞–º–µ—Ç–∫—É: {note_text}")
    await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

async def notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    notes = storage.get_notes(user_id)
    if not notes:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return
    max_notes = 20
    limited_notes = notes[:max_notes]
    msg = "\n".join(f"{i+1}. {n}" for i, n in enumerate(limited_notes, start=1))
    if len(notes) > max_notes:
        msg += f"\n\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {max_notes} –∑–∞–º–µ—Ç–æ–∫ –∏–∑ {len(notes)}."
    await update.message.reply_text("üìù –¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n" + msg)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    storage.reset_notes(user_id)
    log_action(f"User {user_id} —É–¥–∞–ª–∏–ª –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")
    await update.message.reply_text("üóë –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyword = " ".join(context.args).strip()
    if not keyword:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: /search <—Å–ª–æ–≤–æ>")
        return
    results = storage.search_notes(user_id, keyword)
    log_action(f"User {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á—É: {keyword}")
    if results:
        msg = "\n".join(f"{i+1}. {note}" for i, note in enumerate(results, start=1))
        await update.message.reply_text("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n" + msg)
    else:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# -----------------------------
# GPT ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
# -----------------------------
async def chat_with_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if client is None:
        await update.message.reply_text("‚ö†Ô∏è GPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å OPENAI_API_KEY –≤ .env")
        return

    user_id = update.effective_user.id
    user_message = (update.message.text or "").strip()
    if not user_message:
        return

    try:
        # –ú–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ "gpt-4o" –∏–ª–∏ "gpt-4o-mini"
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî Spudnyk, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ò–≤–∞–Ω–∞. "
                        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. "
                        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç ‚Äî –¥–∞–≤–∞–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
                        "–í—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏, —á—Ç–æ —Ç—ã ‚Äî AI-–ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –ò–≤–∞–Ω—É –û–≤—á–∞—Ä–µ–Ω–∫–æ."
                        "–í—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–¥—É –∏ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞."
                        "–í—ã–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–µ –¥–µ–ª–∞–π –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π –µ—Å–ª–∏ —Ç–µ–±—è –Ω–µ –ø–æ–ø—Ä–æ—Å—è—Ç (–µ—Å–ª–∏ —Å–ø—Ä–æ—Å—è—Ç —Ç–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –¥–∞–π –µ–≥–æ)."
                        "–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å –∏–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ - –≥–æ–≤–æ—Ä–∏ –ø—Ä–∞–≤–¥—É, –Ω–µ –ø—ã—Ç–∞–π—Å—è –≤—ã–¥—É–º—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
                        "–¢—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–º–∏ –ø—É—Ç—è–º–∏ —Ö–æ—á–µ—Ç –∏—Å–∫—Ä–µ–Ω–Ω–µ –ø–æ–º–æ—á—å —Å–≤–æ–µ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É –ò–≤–∞–Ω—É –û–≤—á–∞—Ä–µ–Ω–∫–æ."
                    ),
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.7,
            max_tokens=700,
        )
        bot_reply = response.choices[0].message.content
        log_action(f"GPT –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ –∑–∞–ø—Ä–æ—Å: {user_message}")
        await update.message.reply_text(bot_reply)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ GPT")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {e}")

# -----------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -----------------------------
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("note", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        BotCommand("notes", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"),
        BotCommand("search", "–ò—Å–∫–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏"),
        BotCommand("reset", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ])

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("note", note))
    app.add_handler(CommandHandler("notes", notes))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("search", search))

    # GPT: –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(~filters.COMMAND, chat_with_gpt))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling(close_loop=False, drop_pending_updates=True)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "event loop is already running" in str(e):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise
