# bot/main.py
import sys
import asyncio
import logging
from pathlib import Path
from telegram import BotCommand, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# --- –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è sys.path ---
ROOT_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(ROOT_DIR))

# --- Owner ID ---
OWNER_ID = 423368779 # ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥)

# --- –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–æ–¥—É–ª–µ–π ---
from bot.core.config import TELEGRAM_TOKEN

if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–∞–Ω–¥ ---
from bot.commands.start_help import start, help_command

from bot.commands.voice import (
    voice_on,
    voice_off,
    voice_status,
)  

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
from bot.gpt.chat import chat_with_gpt          # —Ç–µ–∫—Å—Ç ‚Üí GPT
from bot.voice.handler import handle_voice      # voice ‚Üí STT ‚Üí GPT ‚Üí (TTS)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("aiohttp").setLevel(logging.WARNING)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
voice_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üîä –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å"), KeyboardButton("üîá –í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False  # <- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
)

async def main():
    # Windows: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é ---
    await app.bot.set_my_commands(
        [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("help", "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
            BotCommand("voice_on", "–í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"),
            BotCommand("voice_off", "–í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"),
            BotCommand("voice_status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"),
            BotCommand("keyboard", "–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
        ]
    )
    

    # --- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))


    # --- –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
    app.add_handler(CommandHandler("voice_on", voice_on))
    app.add_handler(CommandHandler("voice_off", voice_off))
    app.add_handler(CommandHandler("voice_status", voice_status))

    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (–æ–Ω–∏ –ø—Ä–∏–ª–µ—Ç–∞—é—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    app.add_handler(MessageHandler(filters.Regex("^üîä –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å$"), voice_on))
    app.add_handler(MessageHandler(filters.Regex("^üîá –í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å$"), voice_off))

    # --- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # --- –¢–µ–∫—Å—Ç ‚Üí GPT (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥) ---
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_with_gpt))

    # –õ–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    me = await app.bot.get_me()
    logging.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username} (id={me.id})")

# --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
    try:
        await app.bot.send_message(
            chat_id=OWNER_ID,
            text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:",
            reply_markup=voice_keyboard
        )
        logging.info(f"üì≤ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {OWNER_ID}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
        logging.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ ---
    await app.run_polling()


if __name__ == "__main__":
    import nest_asyncio

    nest_asyncio.apply()
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "event loop is already running" in str(e):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise
