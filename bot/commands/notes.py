# bot/commands/notes.py
from telegram import Update
from telegram.ext import ContextTypes
from bot.memory.memory_loader import get_memory
from bot.core.logger import log_action

# Singleton memory instance
_mem = get_memory()


async def note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ö–æ–º–∞–Ω–¥–∞: /note <—Ç–µ–∫—Å—Ç>
    """
    user_id = update.effective_user.id
    text = " ".join(context.args).strip()
    if not text:
        await update.message.reply_text("‚ö†Ô∏è –î–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /note")
        return

    note_id = await _mem.add_note(user_id=user_id, text=text)
    log_action(f"User {user_id} –¥–æ–±–∞–≤–∏–ª –∑–∞–º–µ—Ç–∫—É (id={note_id}): {text}")
    await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")


async def notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ö–æ–º–∞–Ω–¥–∞: /notes
    """
    user_id = update.effective_user.id
    notes_list = await _mem.list_notes(user_id=user_id)
    if not notes_list:
        await update.message.reply_text("üì≠ –ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.")
        return

    msg = "\n".join(f"{i+1}. {n.text}" for i, n in enumerate(notes_list[:20]))
    if len(notes_list) > 20:
        msg += f"\n\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(notes_list)}"
    await update.message.reply_text("üìù –¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n" + msg)


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ö–æ–º–∞–Ω–¥–∞: /reset
    """
    user_id = update.effective_user.id
    notes_list = await _mem.list_notes(user_id=user_id)
    for n in notes_list:
        await _mem.delete_note(n.id)
    log_action(f"User {user_id} —É–¥–∞–ª–∏–ª –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")
    await update.message.reply_text("üóë –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")


async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É.
    –ö–æ–º–∞–Ω–¥–∞: /search <—Å–ª–æ–≤–æ>
    """
    user_id = update.effective_user.id
    keyword = " ".join(context.args).strip()
    if not keyword:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: /search <—Å–ª–æ–≤–æ>")
        return

    notes_list = await _mem.list_notes(user_id=user_id)
    results = [n for n in notes_list if keyword.lower() in n.text.lower()]
    log_action(f"User {user_id} –ø–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫: {keyword}")

    if results:
        msg = "\n".join(f"{i+1}. {n.text}" for i, n in enumerate(results[:20]))
        if len(results) > 20:
            msg += f"\n\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(results)}"
        await update.message.reply_text("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n" + msg)
    else:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
