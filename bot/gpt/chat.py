# bot/gpt/chat.py
from telegram import Update
from telegram.ext import ContextTypes
from openai import OpenAI
import logging
from pathlib import Path
from datetime import datetime

from bot.core.config import (
    OPENAI_API_KEY,
    OPENAI_MODEL,
    OPENAI_TEMPERATURE,
    OPENAI_MAX_TOKENS,
    UPLOADS_DIR,  # –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è mp3
)
from bot.gpt.prompt import SYSTEM_PROMPT
from bot.voice.state import is_voice_on, clear_audio_request
from bot.voice.tts import speak  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è TTS


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI ---
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
if client is None:
    logging.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî GPT-–æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.")


# --- –°—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è GPT ---
def build_messages(user_id: int, user_text: str):
    return [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": user_text},
    ]


# --- –ó–∞–ø—Ä–æ—Å –∫ GPT —á–µ—Ä–µ–∑ OpenAI API ---
def ask_gpt(messages):
    if client is None:
        raise RuntimeError("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    resp = client.chat.completions.create(
        model=OPENAI_MODEL,
        messages=messages,
        temperature=OPENAI_TEMPERATURE,
        max_tokens=OPENAI_MAX_TOKENS,
    )
    return resp.choices[0].message.content


# --- –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è Telegram ---
async def chat_with_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if not update.message or not update.message.text:
        return
    if update.message.text.startswith("/"):
        return

    user_id = update.effective_user.id
    text = update.message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

    if client is None:
        await update.message.reply_text("‚ö†Ô∏è GPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–µ—Ç –∫–ª—é—á–∞ API).")
        return

    try:
        messages = build_messages(user_id, text)
        reply = ask_gpt(messages)
        logging.info(f"GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {reply[:120]!r}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await update.message.reply_text(reply)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ (—Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –≤ –≥–æ–ª–æ—Å–µ)
        if is_voice_on(user_id):
            try:
                ts = datetime.now().strftime("%Y%m%d_%H%M%S")
                user_dir = Path(UPLOADS_DIR) / str(user_id)
                user_dir.mkdir(parents=True, exist_ok=True)
                mp3_out_path = user_dir / f"{ts}_reply_text.mp3"

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ TTS
                await speak(reply, mp3_out_path.as_posix())

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ Telegram
                with mp3_out_path.open("rb") as f:
                    await update.message.reply_audio(
                        audio=f,
                        caption="üîä –ê—É–¥–∏–æ-–æ—Ç–≤–µ—Ç",
                        title=f"reply_{ts}.mp3",
                    )
            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ TTS –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            finally:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –±—ã–ª –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                clear_audio_request(user_id)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ GPT")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}")
